{"version":3,"file":"d3-hilbert.js","sources":["../src/hilbert.js"],"sourcesContent":["export default function() {\n\n    // Hilbert curve algo, from https://en.wikipedia.org/wiki/Hilbert_curve#Applications_and_mapping_algorithms\n    var hilbert = (function() {\n\n        //rotate/flip a quadrant appropriately\n        function rot(n, xy, rx, ry) {\n            if (ry == 0) {\n                if (rx == 1) {\n                    xy[0] = (n - 1 - xy[0]);\n                    xy[1] = (n - 1 - xy[1]);\n                }\n\n                //Swap x and y\n                xy.push(xy.shift());\n            }\n        }\n\n        // Note: this function will start breaking down for n > 2^26 (MAX_SAFE_INTEGER = 2^53)\n        // x,y: cell coordinates, n: sqrt of num cells (square side size)\n        function point2Distance(x, y, n) {\n            var rx, ry, d = 0,\n                xy = [x, y];\n\n            for (var s = n / 2; s >= 1; s /= 2) {\n                rx = (xy[0] & s) > 0;\n                ry = (xy[1] & s) > 0;\n                d += s * s * ((3 * rx) ^ ry);\n                rot(s, xy, rx, ry);\n            }\n            return d;\n        }\n\n        // d: distance, n: sqrt of num cells (square side size)\n        function distance2Point(d, n) {\n            var rx, ry, t = d,\n                xy = [0, 0];\n\n            for (var s = 1; s < n; s *= 2) {\n                rx = 1 & (t / 2);\n                ry = 1 & (t ^ rx);\n                rot(s, xy, rx, ry);\n\n                xy[0] += (s * rx);\n                xy[1] += (s * ry);\n                t /= 4;\n            }\n            return xy;\n        }\n\n        return {\n            point2Distance: point2Distance,\n            distance2Point: distance2Point\n        };\n    })();\n\n    var hilbertLayout = {},\n        canvasWidth = 1,\n        order = 4,\n        simplifyCurves = true;\n\n    hilbertLayout.canvasWidth = function(_) {\n        if (!arguments.length) return canvasWidth;\n        canvasWidth = +_;\n        return hilbertLayout;\n    };\n\n    // Note: Maximum safe order is 26, due to JS numbers upper-boundary of 53 bits\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n    hilbertLayout.order = function(_) {\n        if (!arguments.length) return order;\n        order = +_;\n        return hilbertLayout;\n    };\n\n    hilbertLayout.simplifyCurves = function(_) {\n        if (!arguments.length) return simplifyCurves;\n        simplifyCurves = _;\n        return hilbertLayout;\n    };\n\n    hilbertLayout.layout = function(range) {\n        var d = getHilbertPath(range.start, range.length, order, canvasWidth, simplifyCurves);\n\n        range.cellWidth = d.cellWidth;\n        range.startCell = d.startCell;\n        range.pathVertices = d.pathVertices;\n\n        return hilbertLayout;\n    };\n\n    hilbertLayout.getValAtXY = function(x, y) {\n        var n = Math.pow(2, order),\n            xy = [x, y].map(function(coord) {\n                return Math.floor(coord * n / canvasWidth);\n            });\n        return hilbert.point2Distance(xy[0], xy[1], n);\n    };\n\n    hilbertLayout.getXyAtVal = function (val) {\n        if (val > Math.pow(4, order) || val < 0) {\n            console.error('Value is outside hilbert space boundaries.');\n            return null;\n        } else {\n            return hilbert.distance2Point(val, Math.pow(2, order));\n        }\n    };\n\n    return hilbertLayout;\n\n    //\n\n    function getHilbertPath(start, length, order, sideSize, simplifyCurves) {\n\n        if (simplifyCurves) {\n            // Adjust resolution\n            while (!Number.isInteger(start) || !Number.isInteger(length)) {\n                start *= 4;\n                length *= 4;\n                order += 1;\n            }\n\n            // resolution simplification\n            while (!(start % 4) && !(length % 4) && order > 0) {\n                start /= 4;\n                length /= 4;\n                order -= 1;\n            }\n        }\n\n        // prevent overflow\n        var maxPos = Math.pow(4, order);\n        start = Math.min(start, maxPos);\n        length = Math.min(length, maxPos - start);\n\n        // nSide is on a binary boundary 2^0, 2^1, 2^2, ...\n        var nSide = Math.pow(2, order),\n            cellWidth = sideSize / nSide;\n\n        var startCell = hilbert.distance2Point(start, nSide),\n            vertices = [],\n            prevPnt = startCell,\n            pnt;\n\n        for (var i=1; i < length; i++) {\n            pnt = hilbert.distance2Point(start + i, nSide);\n\n            vertices.push(\n                pnt[0]>prevPnt[0]\n                    ? 'R'\n                    : (pnt[0]<prevPnt[0]\n                        ? 'L'\n                        : (pnt[1]>prevPnt[1]\n                            ? 'D'\n                            : 'U'\n                        )\n                    )\n            );\n\n            prevPnt = pnt;\n        }\n\n        return {\n            cellWidth: cellWidth,\n            startCell: startCell,\n            pathVertices: vertices\n        };\n    }\n}\n"],"names":["hilbert","rot","n","xy","rx","ry","push","shift","point2Distance","x","y","d","s","distance2Point","t","hilbertLayout","canvasWidth","order","simplifyCurves","_","arguments","length","layout","range","getHilbertPath","start","cellWidth","startCell","pathVertices","getValAtXY","Math","pow","map","coord","floor","getXyAtVal","val","console","error","sideSize","Number","isInteger","maxPos","min","nSide","vertices","prevPnt","pnt","i"],"mappings":"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"}